use crate::{mock::*, Error};
use frame_support::{assert_err, assert_ok};
// use frame_system::Origin;
use crate::{Vkey, VkeyStr};

use super::*;

// In this tests, we will use 33 as public signal, where prover will prove him know
// private inputs "a" * "b" = 33
#[test]
fn it_works_for_set_zkeys() {
	new_test_ext().execute_with(|| {
        let origin = RuntimeOrigin::signed(1);

        // public signal is 33
        let public_signal = b"33".to_vec();

        // set the verification key
        let vk_alpha1: Vec<u8> = vec![
            14, 235, 229, 185, 197, 147, 219, 182, 188, 76, 106, 7, 219, 106, 32, 165,
            188, 216, 156, 202, 102, 31, 41, 244, 41, 147, 137, 227, 87, 115, 72, 15,
            203, 103, 32, 125, 75, 85, 180, 57, 127, 247, 165, 153, 109, 67, 244, 123,
            12, 197, 114, 253, 39, 103, 122, 28, 56, 128, 246, 176, 183, 168, 236, 231,
            46, 77, 6, 89, 36, 132, 184, 193, 229, 197, 225, 55, 89, 55, 220, 30, 121,
            132, 83, 182, 155, 18, 105, 243, 63, 60, 12, 64, 85, 45, 110, 120
          ];
        let vk_beta_2: Vec<u8>  = vec![
            19, 153, 192, 188, 1, 66, 227, 33, 75, 255, 33, 182, 193, 177, 16, 178, 78,
            204, 157, 177, 40, 172, 169, 99, 132, 141, 252, 143, 115, 253, 136, 240, 93,
            26, 14, 217, 0, 16, 229, 239, 161, 91, 224, 185, 175, 232, 105, 126, 1, 136,
            170, 28, 174, 8, 180, 165, 125, 80, 91, 42, 187, 151, 104, 189, 166, 153,
            47, 2, 189, 116, 49, 67, 13, 158, 124, 164, 31, 216, 58, 198, 133, 40, 37,
            184, 210, 151, 135, 124, 38, 238, 66, 10, 61, 152, 153, 0, 17, 157, 177, 14,
            107, 216, 219, 226, 138, 177, 169, 153, 181, 193, 2, 8, 242, 220, 175, 188,
            210, 163, 179, 110, 35, 55, 58, 86, 120, 188, 97, 215, 53, 138, 127, 158,
            50, 38, 155, 65, 160, 174, 224, 79, 61, 130, 21, 121, 25, 71, 165, 82, 133,
            134, 235, 195, 215, 49, 179, 101, 30, 237, 57, 162, 232, 74, 180, 66, 134,
            116, 98, 86, 96, 206, 100, 137, 246, 99, 22, 155, 116, 252, 248, 232, 205,
            255, 114, 212, 240, 151, 96, 205, 121, 176, 185, 163
          ];
        let vk_gamma_2: Vec<u8>  = vec![
            19, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89,
            107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51,
            76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162,
            178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212,
            250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168,
            5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 6, 6, 196, 160, 46, 167,
            52, 204, 50, 172, 210, 176, 43, 194, 139, 153, 203, 62, 40, 126, 133, 167,
            99, 175, 38, 116, 146, 171, 87, 46, 153, 171, 63, 55, 13, 39, 92, 236, 29,
            161, 170, 169, 7, 95, 240, 95, 121, 190, 12, 229, 213, 39, 114, 125, 110,
            17, 140, 201, 205, 198, 218, 46, 53, 26, 173, 253, 155, 170, 140, 189, 211,
            167, 109, 66, 154, 105, 81, 96, 209, 44, 146, 58, 201, 204, 59, 172, 162,
            137, 225, 147, 84, 134, 8, 184, 40, 1
          ];
        let vk_delta_2: Vec<u8>  = vec![
            10, 235, 120, 206, 5, 103, 57, 13, 160, 74, 86, 13, 82, 35, 119, 204, 76,
            16, 169, 124, 160, 89, 49, 91, 252, 247, 39, 22, 223, 166, 156, 144, 127,
            150, 13, 6, 236, 231, 104, 221, 20, 131, 213, 171, 249, 53, 144, 17, 0, 66,
            186, 140, 30, 188, 195, 253, 6, 134, 81, 18, 184, 122, 210, 87, 106, 141,
            131, 10, 107, 182, 175, 107, 189, 54, 61, 95, 60, 80, 251, 46, 99, 177, 133,
            70, 254, 186, 216, 70, 2, 41, 220, 251, 112, 48, 22, 168, 17, 85, 37, 191,
            44, 159, 199, 158, 103, 6, 209, 134, 220, 178, 126, 199, 138, 223, 193, 1,
            130, 49, 253, 166, 7, 112, 234, 142, 189, 167, 164, 39, 229, 179, 103, 113,
            216, 150, 205, 172, 136, 25, 254, 147, 187, 105, 192, 230, 7, 81, 12, 124,
            41, 175, 81, 55, 192, 201, 49, 176, 171, 120, 249, 112, 106, 160, 176, 198,
            215, 74, 88, 196, 113, 16, 199, 180, 218, 247, 10, 191, 171, 73, 220, 144,
            121, 49, 9, 206, 180, 1, 125, 85, 221, 205, 188, 93
          ];
        let vk_ic0: Vec<u8>  = vec![
            23, 18, 177, 82, 30, 252, 10, 43, 225, 49, 135, 189, 147, 103, 52, 63,
            148, 124, 209, 79, 134, 245, 66, 199, 153, 152, 187, 251, 40, 135, 79,
            229, 60, 147, 159, 168, 187, 166, 104, 14, 232, 46, 40, 207, 188, 247,
            187, 198, 1, 45, 229, 119, 222, 35, 34, 85, 174, 26, 233, 249, 192, 193,
            152, 57, 49, 228, 62, 195, 127, 167, 94, 230, 17, 225, 54, 18, 42, 215,
            135, 222, 44, 147, 44, 12, 11, 118, 234, 126, 193, 232, 49, 154, 69, 65,
            240, 139
          ];
        let vk_ic1: Vec<u8>  = vec![
            10, 205, 67, 46, 72, 123, 191, 226, 89, 157, 81, 119, 124, 105, 10, 205,
            144, 46, 53, 119, 186, 202, 165, 95, 234, 229, 197, 64, 226, 104, 81, 188,
            255, 224, 123, 126, 209, 105, 183, 94, 143, 2, 172, 69, 8, 53, 103, 67,
            17, 15, 66, 205, 60, 103, 30, 163, 166, 61, 203, 32, 158, 2, 177, 161,
            190, 162, 66, 59, 71, 109, 49, 46, 216, 211, 121, 5, 40, 40, 199, 152,
            230, 80, 81, 237, 60, 233, 19, 87, 121, 174, 174, 195, 244, 17, 218, 115
          ];
        
        assert_ok!(Verifier::set_zk_keys(
            origin.clone(),
            public_signal.clone(),
            vk_alpha1.clone(),
            vk_beta_2.clone(),
            vk_gamma_2.clone(),
            vk_delta_2.clone(),
            vk_ic0.clone(),
            vk_ic1.clone(),
        ));

        assert_eq!(PubSignal::<Test>::get(), public_signal);
        assert_eq!(
            Vkey::<Test>::get(),
            VkeyStr {
                alpha_1: vk_alpha1,
                beta_2: vk_beta_2,
                gamma_2: vk_gamma_2,
                delta_2: vk_delta_2,
                ic0: vk_ic0,
                ic1: vk_ic1,
            }
        );
    })
}

#[test]
fn it_dos_not_work_with_no_public_signals() {
    new_test_ext().execute_with(|| {
        let origin = RuntimeOrigin::signed(1);

        let public_signal = b"".to_vec();
        // set the verification key
        let vk_alpha1: Vec<u8> = vec![
            14, 235, 229, 185, 197, 147, 219, 182, 188, 76, 106, 7, 219, 106, 32, 165,
            188, 216, 156, 202, 102, 31, 41, 244, 41, 147, 137, 227, 87, 115, 72, 15,
            203, 103, 32, 125, 75, 85, 180, 57, 127, 247, 165, 153, 109, 67, 244, 123,
            12, 197, 114, 253, 39, 103, 122, 28, 56, 128, 246, 176, 183, 168, 236, 231,
            46, 77, 6, 89, 36, 132, 184, 193, 229, 197, 225, 55, 89, 55, 220, 30, 121,
            132, 83, 182, 155, 18, 105, 243, 63, 60, 12, 64, 85, 45, 110, 120
          ];
        let vk_beta_2: Vec<u8>  = vec![
            19, 153, 192, 188, 1, 66, 227, 33, 75, 255, 33, 182, 193, 177, 16, 178, 78,
            204, 157, 177, 40, 172, 169, 99, 132, 141, 252, 143, 115, 253, 136, 240, 93,
            26, 14, 217, 0, 16, 229, 239, 161, 91, 224, 185, 175, 232, 105, 126, 1, 136,
            170, 28, 174, 8, 180, 165, 125, 80, 91, 42, 187, 151, 104, 189, 166, 153,
            47, 2, 189, 116, 49, 67, 13, 158, 124, 164, 31, 216, 58, 198, 133, 40, 37,
            184, 210, 151, 135, 124, 38, 238, 66, 10, 61, 152, 153, 0, 17, 157, 177, 14,
            107, 216, 219, 226, 138, 177, 169, 153, 181, 193, 2, 8, 242, 220, 175, 188,
            210, 163, 179, 110, 35, 55, 58, 86, 120, 188, 97, 215, 53, 138, 127, 158,
            50, 38, 155, 65, 160, 174, 224, 79, 61, 130, 21, 121, 25, 71, 165, 82, 133,
            134, 235, 195, 215, 49, 179, 101, 30, 237, 57, 162, 232, 74, 180, 66, 134,
            116, 98, 86, 96, 206, 100, 137, 246, 99, 22, 155, 116, 252, 248, 232, 205,
            255, 114, 212, 240, 151, 96, 205, 121, 176, 185, 163
          ];
        let vk_gamma_2: Vec<u8>  = vec![
            19, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89,
            107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51,
            76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162,
            178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212,
            250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168,
            5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 6, 6, 196, 160, 46, 167,
            52, 204, 50, 172, 210, 176, 43, 194, 139, 153, 203, 62, 40, 126, 133, 167,
            99, 175, 38, 116, 146, 171, 87, 46, 153, 171, 63, 55, 13, 39, 92, 236, 29,
            161, 170, 169, 7, 95, 240, 95, 121, 190, 12, 229, 213, 39, 114, 125, 110,
            17, 140, 201, 205, 198, 218, 46, 53, 26, 173, 253, 155, 170, 140, 189, 211,
            167, 109, 66, 154, 105, 81, 96, 209, 44, 146, 58, 201, 204, 59, 172, 162,
            137, 225, 147, 84, 134, 8, 184, 40, 1
          ];
        let vk_delta_2: Vec<u8>  = vec![
            10, 235, 120, 206, 5, 103, 57, 13, 160, 74, 86, 13, 82, 35, 119, 204, 76,
            16, 169, 124, 160, 89, 49, 91, 252, 247, 39, 22, 223, 166, 156, 144, 127,
            150, 13, 6, 236, 231, 104, 221, 20, 131, 213, 171, 249, 53, 144, 17, 0, 66,
            186, 140, 30, 188, 195, 253, 6, 134, 81, 18, 184, 122, 210, 87, 106, 141,
            131, 10, 107, 182, 175, 107, 189, 54, 61, 95, 60, 80, 251, 46, 99, 177, 133,
            70, 254, 186, 216, 70, 2, 41, 220, 251, 112, 48, 22, 168, 17, 85, 37, 191,
            44, 159, 199, 158, 103, 6, 209, 134, 220, 178, 126, 199, 138, 223, 193, 1,
            130, 49, 253, 166, 7, 112, 234, 142, 189, 167, 164, 39, 229, 179, 103, 113,
            216, 150, 205, 172, 136, 25, 254, 147, 187, 105, 192, 230, 7, 81, 12, 124,
            41, 175, 81, 55, 192, 201, 49, 176, 171, 120, 249, 112, 106, 160, 176, 198,
            215, 74, 88, 196, 113, 16, 199, 180, 218, 247, 10, 191, 171, 73, 220, 144,
            121, 49, 9, 206, 180, 1, 125, 85, 221, 205, 188, 93
          ];
        let vk_ic0: Vec<u8>  = vec![
            23, 18, 177, 82, 30, 252, 10, 43, 225, 49, 135, 189, 147, 103, 52, 63,
            148, 124, 209, 79, 134, 245, 66, 199, 153, 152, 187, 251, 40, 135, 79,
            229, 60, 147, 159, 168, 187, 166, 104, 14, 232, 46, 40, 207, 188, 247,
            187, 198, 1, 45, 229, 119, 222, 35, 34, 85, 174, 26, 233, 249, 192, 193,
            152, 57, 49, 228, 62, 195, 127, 167, 94, 230, 17, 225, 54, 18, 42, 215,
            135, 222, 44, 147, 44, 12, 11, 118, 234, 126, 193, 232, 49, 154, 69, 65,
            240, 139
          ];
        let vk_ic1: Vec<u8>  = vec![
            10, 205, 67, 46, 72, 123, 191, 226, 89, 157, 81, 119, 124, 105, 10, 205,
            144, 46, 53, 119, 186, 202, 165, 95, 234, 229, 197, 64, 226, 104, 81, 188,
            255, 224, 123, 126, 209, 105, 183, 94, 143, 2, 172, 69, 8, 53, 103, 67,
            17, 15, 66, 205, 60, 103, 30, 163, 166, 61, 203, 32, 158, 2, 177, 161,
            190, 162, 66, 59, 71, 109, 49, 46, 216, 211, 121, 5, 40, 40, 199, 152,
            230, 80, 81, 237, 60, 233, 19, 87, 121, 174, 174, 195, 244, 17, 218, 115
          ];
        assert_err!(
            Verifier::set_zk_keys(
            origin.clone(),
            public_signal.clone(),
            vk_alpha1.clone(),
            vk_beta_2.clone(),
            vk_gamma_2.clone(),
            vk_delta_2.clone(),
            vk_ic0.clone(),
            vk_ic1.clone(),
            ),
            Error::<Test>::ErrorPublicSignal
        );        
    })
}

#[test]
fn it_does_not_work_with_incorrect_format_verification_key() {
    new_test_ext().execute_with(|| {
        let origin = RuntimeOrigin::signed(1);

        let public_signal = b"33".to_vec();

        let vk_alpha1: Vec<u8> = vec![
            14, 235, 229, 185, 197, 147, 219, 182, 188, 76, 106, 7, 219, 106, 32, 165,
            188, 216, 156, 202, 102, 31, 41, 244, 41, 147, 137, 227, 87, 115, 72, 15,
            203, 103, 32, 125, 75, 85, 180, 57, 127, 247, 165, 153, 109, 67, 244, 123,
            12, 197, 114, 253, 39, 103, 122, 28, 56, 128, 246, 176, 183, 168, 236, 231,
            46, 77, 6, 89, 36, 132, 184, 193, 229, 197, 225, 55, 89, 55, 220, 30, 121,
            132, 83, 182, 155, 18, 105, 243, 63, 60, 12, 64, 85, 45, 110, 120
          ];
        let vk_beta_2: Vec<u8>  = vec![
            19, 153, 192, 188, 1, 66, 227, 33, 75, 255, 33, 182, 193, 177, 16, 178, 78,
            204, 157, 177, 40, 172, 169, 99, 132, 141, 252, 143, 115, 253, 136, 240, 93,
            26, 14, 217, 0, 16, 229, 239, 161, 91, 224, 185, 175, 232, 105, 126, 1, 136,
            170, 28, 174, 8, 180, 165, 125, 80, 91, 42, 187, 151, 104, 189, 166, 153,
            47, 2, 189, 116, 49, 67, 13, 158, 124, 164, 31, 216, 58, 198, 133, 40, 37,
            184, 210, 151, 135, 124, 38, 238, 66, 10, 61, 152, 153, 0, 17, 157, 177, 14,
            107, 216, 219, 226, 138, 177, 169, 153, 181, 193, 2, 8, 242, 220, 175, 188,
            210, 163, 179, 110, 35, 55, 58, 86, 120, 188, 97, 215, 53, 138, 127, 158,
            50, 38, 155, 65, 160, 174, 224, 79, 61, 130, 21, 121, 25, 71, 165, 82, 133,
            134, 235, 195, 215, 49, 179, 101, 30, 237, 57, 162, 232, 74, 180, 66, 134,
            116, 98, 86, 96, 206, 100, 137, 246, 99, 22, 155, 116, 252, 248, 232, 205,
            255, 114, 212, 240, 151, 96, 205, 121, 176, 185, 163
          ];
        let vk_gamma_2: Vec<u8>  = vec![
            19, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89,
            107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51,
            76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162,
            178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212,
            250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168,
            5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 6, 6, 196, 160, 46, 167,
            52, 204, 50, 172, 210, 176, 43, 194, 139, 153, 203, 62, 40, 126, 133, 167,
            99, 175, 38, 116, 146, 171, 87, 46, 153, 171, 63, 55, 13, 39, 92, 236, 29,
            161, 170, 169, 7, 95, 240, 95, 121, 190, 12, 229, 213, 39, 114, 125, 110,
            17, 140, 201, 205, 198, 218, 46, 53, 26, 173, 253, 155, 170, 140, 189, 211,
            167, 109, 66, 154, 105, 81, 96, 209, 44, 146, 58, 201, 204, 59, 172, 162,
            137, 225, 147, 84, 134, 8, 184, 40, 1
          ];
        let vk_delta_2: Vec<u8>  = vec![
            10, 235, 120, 206, 5, 103, 57, 13, 160, 74, 86, 13, 82, 35, 119, 204, 76,
            16, 169, 124, 160, 89, 49, 91, 252, 247, 39, 22, 223, 166, 156, 144, 127,
            150, 13, 6, 236, 231, 104, 221, 20, 131, 213, 171, 249, 53, 144, 17, 0, 66,
            186, 140, 30, 188, 195, 253, 6, 134, 81, 18, 184, 122, 210, 87, 106, 141,
            131, 10, 107, 182, 175, 107, 189, 54, 61, 95, 60, 80, 251, 46, 99, 177, 133,
            70, 254, 186, 216, 70, 2, 41, 220, 251, 112, 48, 22, 168, 17, 85, 37, 191,
            44, 159, 199, 158, 103, 6, 209, 134, 220, 178, 126, 199, 138, 223, 193, 1,
            130, 49, 253, 166, 7, 112, 234, 142, 189, 167, 164, 39, 229, 179, 103, 113,
            216, 150, 205, 172, 136, 25, 254, 147, 187, 105, 192, 230, 7, 81, 12, 124,
            41, 175, 81, 55, 192, 201, 49, 176, 171, 120, 249, 112, 106, 160, 176, 198,
            215, 74, 88, 196, 113, 16, 199, 180, 218, 247, 10, 191, 171, 73, 220, 144,
            121, 49, 9, 206, 180, 1, 125, 85, 221, 205, 188, 93
          ];
        let vk_ic0: Vec<u8>  = vec![
            23, 18, 177, 82, 30, 252, 10, 43, 225, 49, 135, 189, 147, 103, 52, 63,
            148, 124, 209, 79, 134, 245, 66, 199, 153, 152, 187, 251, 40, 135, 79,
            229, 60, 147, 159, 168, 187, 166, 104, 14, 232, 46, 40, 207, 188, 247,
            187, 198, 1, 45, 229, 119, 222, 35, 34, 85, 174, 26, 233, 249, 192, 193,
            152, 57, 49, 228, 62, 195, 127, 167, 94, 230, 17, 225, 54, 18, 42, 215,
            135, 222, 44, 147, 44, 12, 11, 118, 234, 126, 193, 232, 49, 154, 69, 65,
            240, 139
          ];

        // It should be rejected, because the format of verification key is incorrect.
        let vk_ic1: Vec<u8>  = vec![
            0,0,0,0
        ];

        assert_err!(
            Verifier::set_zk_keys(
            origin.clone(),
            public_signal.clone(),
            vk_alpha1.clone(),
            vk_beta_2.clone(),
            vk_gamma_2.clone(),
            vk_delta_2.clone(),
            vk_ic0.clone(),
            vk_ic1.clone(),
            ),
            Error::<Test>::ErrorVerificationKey
        );     
    })
}

#[test]
fn it_works_for_verify_proof() {
	new_test_ext().execute_with(|| {
        let origin = RuntimeOrigin::signed(1);

        let public_signal = b"33".to_vec();

        let vk_alpha1: Vec<u8> = vec![
            14, 235, 229, 185, 197, 147, 219, 182, 188, 76, 106, 7, 219, 106, 32, 165,
            188, 216, 156, 202, 102, 31, 41, 244, 41, 147, 137, 227, 87, 115, 72, 15,
            203, 103, 32, 125, 75, 85, 180, 57, 127, 247, 165, 153, 109, 67, 244, 123,
            12, 197, 114, 253, 39, 103, 122, 28, 56, 128, 246, 176, 183, 168, 236, 231,
            46, 77, 6, 89, 36, 132, 184, 193, 229, 197, 225, 55, 89, 55, 220, 30, 121,
            132, 83, 182, 155, 18, 105, 243, 63, 60, 12, 64, 85, 45, 110, 120
          ];
        let vk_beta_2: Vec<u8>  = vec![
            19, 153, 192, 188, 1, 66, 227, 33, 75, 255, 33, 182, 193, 177, 16, 178, 78,
            204, 157, 177, 40, 172, 169, 99, 132, 141, 252, 143, 115, 253, 136, 240, 93,
            26, 14, 217, 0, 16, 229, 239, 161, 91, 224, 185, 175, 232, 105, 126, 1, 136,
            170, 28, 174, 8, 180, 165, 125, 80, 91, 42, 187, 151, 104, 189, 166, 153,
            47, 2, 189, 116, 49, 67, 13, 158, 124, 164, 31, 216, 58, 198, 133, 40, 37,
            184, 210, 151, 135, 124, 38, 238, 66, 10, 61, 152, 153, 0, 17, 157, 177, 14,
            107, 216, 219, 226, 138, 177, 169, 153, 181, 193, 2, 8, 242, 220, 175, 188,
            210, 163, 179, 110, 35, 55, 58, 86, 120, 188, 97, 215, 53, 138, 127, 158,
            50, 38, 155, 65, 160, 174, 224, 79, 61, 130, 21, 121, 25, 71, 165, 82, 133,
            134, 235, 195, 215, 49, 179, 101, 30, 237, 57, 162, 232, 74, 180, 66, 134,
            116, 98, 86, 96, 206, 100, 137, 246, 99, 22, 155, 116, 252, 248, 232, 205,
            255, 114, 212, 240, 151, 96, 205, 121, 176, 185, 163
          ];
        let vk_gamma_2: Vec<u8>  = vec![
            19, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89,
            107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51,
            76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162,
            178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212,
            250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168,
            5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 6, 6, 196, 160, 46, 167,
            52, 204, 50, 172, 210, 176, 43, 194, 139, 153, 203, 62, 40, 126, 133, 167,
            99, 175, 38, 116, 146, 171, 87, 46, 153, 171, 63, 55, 13, 39, 92, 236, 29,
            161, 170, 169, 7, 95, 240, 95, 121, 190, 12, 229, 213, 39, 114, 125, 110,
            17, 140, 201, 205, 198, 218, 46, 53, 26, 173, 253, 155, 170, 140, 189, 211,
            167, 109, 66, 154, 105, 81, 96, 209, 44, 146, 58, 201, 204, 59, 172, 162,
            137, 225, 147, 84, 134, 8, 184, 40, 1
          ];
        let vk_delta_2: Vec<u8>  = vec![
            10, 235, 120, 206, 5, 103, 57, 13, 160, 74, 86, 13, 82, 35, 119, 204, 76,
            16, 169, 124, 160, 89, 49, 91, 252, 247, 39, 22, 223, 166, 156, 144, 127,
            150, 13, 6, 236, 231, 104, 221, 20, 131, 213, 171, 249, 53, 144, 17, 0, 66,
            186, 140, 30, 188, 195, 253, 6, 134, 81, 18, 184, 122, 210, 87, 106, 141,
            131, 10, 107, 182, 175, 107, 189, 54, 61, 95, 60, 80, 251, 46, 99, 177, 133,
            70, 254, 186, 216, 70, 2, 41, 220, 251, 112, 48, 22, 168, 17, 85, 37, 191,
            44, 159, 199, 158, 103, 6, 209, 134, 220, 178, 126, 199, 138, 223, 193, 1,
            130, 49, 253, 166, 7, 112, 234, 142, 189, 167, 164, 39, 229, 179, 103, 113,
            216, 150, 205, 172, 136, 25, 254, 147, 187, 105, 192, 230, 7, 81, 12, 124,
            41, 175, 81, 55, 192, 201, 49, 176, 171, 120, 249, 112, 106, 160, 176, 198,
            215, 74, 88, 196, 113, 16, 199, 180, 218, 247, 10, 191, 171, 73, 220, 144,
            121, 49, 9, 206, 180, 1, 125, 85, 221, 205, 188, 93
          ];
        let vk_ic0: Vec<u8>  = vec![
            23, 18, 177, 82, 30, 252, 10, 43, 225, 49, 135, 189, 147, 103, 52, 63,
            148, 124, 209, 79, 134, 245, 66, 199, 153, 152, 187, 251, 40, 135, 79,
            229, 60, 147, 159, 168, 187, 166, 104, 14, 232, 46, 40, 207, 188, 247,
            187, 198, 1, 45, 229, 119, 222, 35, 34, 85, 174, 26, 233, 249, 192, 193,
            152, 57, 49, 228, 62, 195, 127, 167, 94, 230, 17, 225, 54, 18, 42, 215,
            135, 222, 44, 147, 44, 12, 11, 118, 234, 126, 193, 232, 49, 154, 69, 65,
            240, 139
          ];
        let vk_ic1: Vec<u8>  = vec![
            10, 205, 67, 46, 72, 123, 191, 226, 89, 157, 81, 119, 124, 105, 10, 205,
            144, 46, 53, 119, 186, 202, 165, 95, 234, 229, 197, 64, 226, 104, 81, 188,
            255, 224, 123, 126, 209, 105, 183, 94, 143, 2, 172, 69, 8, 53, 103, 67,
            17, 15, 66, 205, 60, 103, 30, 163, 166, 61, 203, 32, 158, 2, 177, 161,
            190, 162, 66, 59, 71, 109, 49, 46, 216, 211, 121, 5, 40, 40, 199, 152,
            230, 80, 81, 237, 60, 233, 19, 87, 121, 174, 174, 195, 244, 17, 218, 115
          ];
        
        let proof_a: Vec<u8> = vec![
            3, 90, 251, 125, 73, 238, 226, 147, 219, 11, 218, 100, 233, 150, 39, 57, 77,
            147, 211, 72, 10, 126, 251, 134, 163, 166, 44, 187, 206, 100, 45, 225, 226,
            48, 145, 95, 116, 136, 246, 117, 29, 213, 11, 7, 6, 176, 20, 249, 20, 168,
            236, 95, 194, 59, 28, 23, 156, 168, 232, 151, 178, 44, 63, 56, 253, 198,
            134, 147, 58, 234, 174, 90, 62, 238, 182, 45, 18, 201, 207, 104, 45, 236,
            200, 35, 72, 95, 55, 151, 110, 116, 85, 111, 198, 72, 236, 8
          ];
        let proof_b: Vec<u8> = vec![
            16, 81, 88, 100, 152, 215, 247, 84, 158, 254, 226, 209, 46, 126, 171, 24, 9,
            178, 239, 244, 74, 249, 147, 107, 239, 6, 155, 146, 144, 172, 121, 66, 244,
            170, 191, 19, 102, 100, 255, 88, 5, 247, 241, 138, 193, 19, 220, 84, 4, 157,
            169, 237, 101, 114, 72, 229, 74, 81, 33, 195, 236, 148, 67, 133, 55, 104,
            133, 13, 208, 154, 230, 220, 98, 40, 45, 255, 204, 59, 127, 3, 125, 185,
            127, 17, 151, 104, 43, 250, 212, 47, 3, 151, 144, 119, 118, 95, 23, 129,
            246, 146, 3, 54, 199, 120, 33, 113, 215, 164, 83, 47, 204, 26, 146, 190,
            245, 171, 163, 125, 4, 182, 180, 168, 128, 6, 139, 127, 29, 11, 101, 195,
            157, 85, 27, 134, 66, 216, 235, 116, 69, 36, 118, 231, 209, 71, 16, 122, 21,
            102, 83, 215, 237, 168, 7, 202, 221, 244, 243, 69, 210, 242, 66, 69, 11,
            106, 204, 224, 37, 155, 162, 184, 1, 156, 1, 61, 226, 145, 223, 40, 65, 180,
            14, 114, 203, 4, 147, 176, 26, 246, 55, 228, 220, 2
          ];
        let proof_c: Vec<u8>  = vec![
            4, 139, 198, 255, 245, 129, 183, 228, 171, 143, 161, 113, 221, 14, 251, 83,
            247, 237, 37, 137, 37, 222, 125, 81, 157, 16, 206, 244, 29, 99, 67, 159, 0,
            197, 184, 107, 137, 62, 233, 72, 113, 242, 22, 211, 221, 109, 230, 221, 22,
            247, 190, 253, 186, 161, 158, 62, 180, 191, 108, 204, 134, 22, 66, 237, 80,
            35, 19, 174, 123, 230, 182, 84, 248, 96, 3, 253, 115, 147, 172, 119, 150,
            179, 175, 77, 102, 246, 97, 55, 199, 14, 249, 146, 245, 41, 215, 253
          ];

        // verifier set verification key and public signals
        assert_ok!(Verifier::set_zk_keys(
            origin.clone(),
            public_signal.clone(),
            vk_alpha1.clone(),
            vk_beta_2.clone(),
            vk_gamma_2.clone(),
            vk_delta_2.clone(),
            vk_ic0.clone(),
            vk_ic1.clone(),
        ));

        // prover provide proof and verifier do verification
         assert_ok!(Verifier::verify(
            origin.clone(),
            proof_a.clone(),
            proof_b.clone(),
            proof_c.clone(),
        )); 

    })
}


#[test]
fn validate_incorrect_proof_work() {
    new_test_ext().execute_with(|| {
        let origin = RuntimeOrigin::signed(1);

        let public_signal = b"33".to_vec();

        let vk_alpha1: Vec<u8> = vec![
            14, 235, 229, 185, 197, 147, 219, 182, 188, 76, 106, 7, 219, 106, 32, 165,
            188, 216, 156, 202, 102, 31, 41, 244, 41, 147, 137, 227, 87, 115, 72, 15,
            203, 103, 32, 125, 75, 85, 180, 57, 127, 247, 165, 153, 109, 67, 244, 123,
            12, 197, 114, 253, 39, 103, 122, 28, 56, 128, 246, 176, 183, 168, 236, 231,
            46, 77, 6, 89, 36, 132, 184, 193, 229, 197, 225, 55, 89, 55, 220, 30, 121,
            132, 83, 182, 155, 18, 105, 243, 63, 60, 12, 64, 85, 45, 110, 120
          ];
        let vk_beta_2: Vec<u8>  = vec![
            19, 153, 192, 188, 1, 66, 227, 33, 75, 255, 33, 182, 193, 177, 16, 178, 78,
            204, 157, 177, 40, 172, 169, 99, 132, 141, 252, 143, 115, 253, 136, 240, 93,
            26, 14, 217, 0, 16, 229, 239, 161, 91, 224, 185, 175, 232, 105, 126, 1, 136,
            170, 28, 174, 8, 180, 165, 125, 80, 91, 42, 187, 151, 104, 189, 166, 153,
            47, 2, 189, 116, 49, 67, 13, 158, 124, 164, 31, 216, 58, 198, 133, 40, 37,
            184, 210, 151, 135, 124, 38, 238, 66, 10, 61, 152, 153, 0, 17, 157, 177, 14,
            107, 216, 219, 226, 138, 177, 169, 153, 181, 193, 2, 8, 242, 220, 175, 188,
            210, 163, 179, 110, 35, 55, 58, 86, 120, 188, 97, 215, 53, 138, 127, 158,
            50, 38, 155, 65, 160, 174, 224, 79, 61, 130, 21, 121, 25, 71, 165, 82, 133,
            134, 235, 195, 215, 49, 179, 101, 30, 237, 57, 162, 232, 74, 180, 66, 134,
            116, 98, 86, 96, 206, 100, 137, 246, 99, 22, 155, 116, 252, 248, 232, 205,
            255, 114, 212, 240, 151, 96, 205, 121, 176, 185, 163
          ];
        let vk_gamma_2: Vec<u8>  = vec![
            19, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89,
            107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51,
            76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162,
            178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212,
            250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168,
            5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 6, 6, 196, 160, 46, 167,
            52, 204, 50, 172, 210, 176, 43, 194, 139, 153, 203, 62, 40, 126, 133, 167,
            99, 175, 38, 116, 146, 171, 87, 46, 153, 171, 63, 55, 13, 39, 92, 236, 29,
            161, 170, 169, 7, 95, 240, 95, 121, 190, 12, 229, 213, 39, 114, 125, 110,
            17, 140, 201, 205, 198, 218, 46, 53, 26, 173, 253, 155, 170, 140, 189, 211,
            167, 109, 66, 154, 105, 81, 96, 209, 44, 146, 58, 201, 204, 59, 172, 162,
            137, 225, 147, 84, 134, 8, 184, 40, 1
          ];
        let vk_delta_2: Vec<u8>  = vec![
            10, 235, 120, 206, 5, 103, 57, 13, 160, 74, 86, 13, 82, 35, 119, 204, 76,
            16, 169, 124, 160, 89, 49, 91, 252, 247, 39, 22, 223, 166, 156, 144, 127,
            150, 13, 6, 236, 231, 104, 221, 20, 131, 213, 171, 249, 53, 144, 17, 0, 66,
            186, 140, 30, 188, 195, 253, 6, 134, 81, 18, 184, 122, 210, 87, 106, 141,
            131, 10, 107, 182, 175, 107, 189, 54, 61, 95, 60, 80, 251, 46, 99, 177, 133,
            70, 254, 186, 216, 70, 2, 41, 220, 251, 112, 48, 22, 168, 17, 85, 37, 191,
            44, 159, 199, 158, 103, 6, 209, 134, 220, 178, 126, 199, 138, 223, 193, 1,
            130, 49, 253, 166, 7, 112, 234, 142, 189, 167, 164, 39, 229, 179, 103, 113,
            216, 150, 205, 172, 136, 25, 254, 147, 187, 105, 192, 230, 7, 81, 12, 124,
            41, 175, 81, 55, 192, 201, 49, 176, 171, 120, 249, 112, 106, 160, 176, 198,
            215, 74, 88, 196, 113, 16, 199, 180, 218, 247, 10, 191, 171, 73, 220, 144,
            121, 49, 9, 206, 180, 1, 125, 85, 221, 205, 188, 93
          ];
        let vk_ic0: Vec<u8>  = vec![
            23, 18, 177, 82, 30, 252, 10, 43, 225, 49, 135, 189, 147, 103, 52, 63,
            148, 124, 209, 79, 134, 245, 66, 199, 153, 152, 187, 251, 40, 135, 79,
            229, 60, 147, 159, 168, 187, 166, 104, 14, 232, 46, 40, 207, 188, 247,
            187, 198, 1, 45, 229, 119, 222, 35, 34, 85, 174, 26, 233, 249, 192, 193,
            152, 57, 49, 228, 62, 195, 127, 167, 94, 230, 17, 225, 54, 18, 42, 215,
            135, 222, 44, 147, 44, 12, 11, 118, 234, 126, 193, 232, 49, 154, 69, 65,
            240, 139
          ];
        let vk_ic1: Vec<u8>  = vec![
            10, 205, 67, 46, 72, 123, 191, 226, 89, 157, 81, 119, 124, 105, 10, 205,
            144, 46, 53, 119, 186, 202, 165, 95, 234, 229, 197, 64, 226, 104, 81, 188,
            255, 224, 123, 126, 209, 105, 183, 94, 143, 2, 172, 69, 8, 53, 103, 67,
            17, 15, 66, 205, 60, 103, 30, 163, 166, 61, 203, 32, 158, 2, 177, 161,
            190, 162, 66, 59, 71, 109, 49, 46, 216, 211, 121, 5, 40, 40, 199, 152,
            230, 80, 81, 237, 60, 233, 19, 87, 121, 174, 174, 195, 244, 17, 218, 115
          ];

          let proof_a: Vec<u8> = vec![
            3, 90, 251, 125, 73, 238, 226, 147, 219, 11, 218, 100, 233, 150, 39, 57, 77,
            147, 211, 72, 10, 126, 251, 134, 163, 166, 44, 187, 206, 100, 45, 225, 226,
            48, 145, 95, 116, 136, 246, 117, 29, 213, 11, 7, 6, 176, 20, 249, 20, 168,
            236, 95, 194, 59, 28, 23, 156, 168, 232, 151, 178, 44, 63, 56, 253, 198,
            134, 147, 58, 234, 174, 90, 62, 238, 182, 45, 18, 201, 207, 104, 45, 236,
            200, 35, 72, 95, 55, 151, 110, 116, 85, 111, 198, 72, 236, 8
          ];
        let proof_b: Vec<u8> = vec![
            16, 81, 88, 100, 152, 215, 247, 84, 158, 254, 226, 209, 46, 126, 171, 24, 9,
            178, 239, 244, 74, 249, 147, 107, 239, 6, 155, 146, 144, 172, 121, 66, 244,
            170, 191, 19, 102, 100, 255, 88, 5, 247, 241, 138, 193, 19, 220, 84, 4, 157,
            169, 237, 101, 114, 72, 229, 74, 81, 33, 195, 236, 148, 67, 133, 55, 104,
            133, 13, 208, 154, 230, 220, 98, 40, 45, 255, 204, 59, 127, 3, 125, 185,
            127, 17, 151, 104, 43, 250, 212, 47, 3, 151, 144, 119, 118, 95, 23, 129,
            246, 146, 3, 54, 199, 120, 33, 113, 215, 164, 83, 47, 204, 26, 146, 190,
            245, 171, 163, 125, 4, 182, 180, 168, 128, 6, 139, 127, 29, 11, 101, 195,
            157, 85, 27, 134, 66, 216, 235, 116, 69, 36, 118, 231, 209, 71, 16, 122, 21,
            102, 83, 215, 237, 168, 7, 202, 221, 244, 243, 69, 210, 242, 66, 69, 11,
            106, 204, 224, 37, 155, 162, 184, 1, 156, 1, 61, 226, 145, 223, 40, 65, 180,
            14, 114, 203, 4, 147, 176, 26, 246, 55, 228, 220, 2
          ];

        // It should be rejected by verifier, it's a incorrect format proof
        let invalid_proof_c = vec![0x0f, 0x07, 0x5a, 0x5f, 0x3b, 0x6b, 0x1d, 0x8d, 0x89, 0x36, 0x62, 0x0e, 0x4c, 0x4b, 0x9e, 0x1c];

        
        // verifier set verification key and public signals
        assert_ok!(Verifier::set_zk_keys(
            origin.clone(),
            public_signal.clone(),
            vk_alpha1.clone(),
            vk_beta_2.clone(),
            vk_gamma_2.clone(),
            vk_delta_2.clone(),
            vk_ic0.clone(),
            vk_ic1.clone(),
        ));

        // prover provide proof and verifier do verification
        assert_err!(
            Verifier::verify(
                origin.clone(),
                proof_a.clone(),
                proof_b.clone(),
                invalid_proof_c.clone()
            ),
            Error::<Test>::ErrorProof
        ); 
    })
}



#[test]
fn validate_invalid_proof_work() {
    new_test_ext().execute_with(|| {
        let origin = RuntimeOrigin::signed(1);

        let public_signal = b"33".to_vec();

        let vk_alpha1: Vec<u8> = vec![
            14, 235, 229, 185, 197, 147, 219, 182, 188, 76, 106, 7, 219, 106, 32, 165,
            188, 216, 156, 202, 102, 31, 41, 244, 41, 147, 137, 227, 87, 115, 72, 15,
            203, 103, 32, 125, 75, 85, 180, 57, 127, 247, 165, 153, 109, 67, 244, 123,
            12, 197, 114, 253, 39, 103, 122, 28, 56, 128, 246, 176, 183, 168, 236, 231,
            46, 77, 6, 89, 36, 132, 184, 193, 229, 197, 225, 55, 89, 55, 220, 30, 121,
            132, 83, 182, 155, 18, 105, 243, 63, 60, 12, 64, 85, 45, 110, 120
          ];
        let vk_beta_2: Vec<u8>  = vec![
            19, 153, 192, 188, 1, 66, 227, 33, 75, 255, 33, 182, 193, 177, 16, 178, 78,
            204, 157, 177, 40, 172, 169, 99, 132, 141, 252, 143, 115, 253, 136, 240, 93,
            26, 14, 217, 0, 16, 229, 239, 161, 91, 224, 185, 175, 232, 105, 126, 1, 136,
            170, 28, 174, 8, 180, 165, 125, 80, 91, 42, 187, 151, 104, 189, 166, 153,
            47, 2, 189, 116, 49, 67, 13, 158, 124, 164, 31, 216, 58, 198, 133, 40, 37,
            184, 210, 151, 135, 124, 38, 238, 66, 10, 61, 152, 153, 0, 17, 157, 177, 14,
            107, 216, 219, 226, 138, 177, 169, 153, 181, 193, 2, 8, 242, 220, 175, 188,
            210, 163, 179, 110, 35, 55, 58, 86, 120, 188, 97, 215, 53, 138, 127, 158,
            50, 38, 155, 65, 160, 174, 224, 79, 61, 130, 21, 121, 25, 71, 165, 82, 133,
            134, 235, 195, 215, 49, 179, 101, 30, 237, 57, 162, 232, 74, 180, 66, 134,
            116, 98, 86, 96, 206, 100, 137, 246, 99, 22, 155, 116, 252, 248, 232, 205,
            255, 114, 212, 240, 151, 96, 205, 121, 176, 185, 163
          ];
        let vk_gamma_2: Vec<u8>  = vec![
            19, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89,
            107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51,
            76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162,
            178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212,
            250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168,
            5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 6, 6, 196, 160, 46, 167,
            52, 204, 50, 172, 210, 176, 43, 194, 139, 153, 203, 62, 40, 126, 133, 167,
            99, 175, 38, 116, 146, 171, 87, 46, 153, 171, 63, 55, 13, 39, 92, 236, 29,
            161, 170, 169, 7, 95, 240, 95, 121, 190, 12, 229, 213, 39, 114, 125, 110,
            17, 140, 201, 205, 198, 218, 46, 53, 26, 173, 253, 155, 170, 140, 189, 211,
            167, 109, 66, 154, 105, 81, 96, 209, 44, 146, 58, 201, 204, 59, 172, 162,
            137, 225, 147, 84, 134, 8, 184, 40, 1
          ];
        let vk_delta_2: Vec<u8>  = vec![
            10, 235, 120, 206, 5, 103, 57, 13, 160, 74, 86, 13, 82, 35, 119, 204, 76,
            16, 169, 124, 160, 89, 49, 91, 252, 247, 39, 22, 223, 166, 156, 144, 127,
            150, 13, 6, 236, 231, 104, 221, 20, 131, 213, 171, 249, 53, 144, 17, 0, 66,
            186, 140, 30, 188, 195, 253, 6, 134, 81, 18, 184, 122, 210, 87, 106, 141,
            131, 10, 107, 182, 175, 107, 189, 54, 61, 95, 60, 80, 251, 46, 99, 177, 133,
            70, 254, 186, 216, 70, 2, 41, 220, 251, 112, 48, 22, 168, 17, 85, 37, 191,
            44, 159, 199, 158, 103, 6, 209, 134, 220, 178, 126, 199, 138, 223, 193, 1,
            130, 49, 253, 166, 7, 112, 234, 142, 189, 167, 164, 39, 229, 179, 103, 113,
            216, 150, 205, 172, 136, 25, 254, 147, 187, 105, 192, 230, 7, 81, 12, 124,
            41, 175, 81, 55, 192, 201, 49, 176, 171, 120, 249, 112, 106, 160, 176, 198,
            215, 74, 88, 196, 113, 16, 199, 180, 218, 247, 10, 191, 171, 73, 220, 144,
            121, 49, 9, 206, 180, 1, 125, 85, 221, 205, 188, 93
          ];
        let vk_ic0: Vec<u8>  = vec![
            23, 18, 177, 82, 30, 252, 10, 43, 225, 49, 135, 189, 147, 103, 52, 63,
            148, 124, 209, 79, 134, 245, 66, 199, 153, 152, 187, 251, 40, 135, 79,
            229, 60, 147, 159, 168, 187, 166, 104, 14, 232, 46, 40, 207, 188, 247,
            187, 198, 1, 45, 229, 119, 222, 35, 34, 85, 174, 26, 233, 249, 192, 193,
            152, 57, 49, 228, 62, 195, 127, 167, 94, 230, 17, 225, 54, 18, 42, 215,
            135, 222, 44, 147, 44, 12, 11, 118, 234, 126, 193, 232, 49, 154, 69, 65,
            240, 139
          ];
        let vk_ic1: Vec<u8>  = vec![
            10, 205, 67, 46, 72, 123, 191, 226, 89, 157, 81, 119, 124, 105, 10, 205,
            144, 46, 53, 119, 186, 202, 165, 95, 234, 229, 197, 64, 226, 104, 81, 188,
            255, 224, 123, 126, 209, 105, 183, 94, 143, 2, 172, 69, 8, 53, 103, 67,
            17, 15, 66, 205, 60, 103, 30, 163, 166, 61, 203, 32, 158, 2, 177, 161,
            190, 162, 66, 59, 71, 109, 49, 46, 216, 211, 121, 5, 40, 40, 199, 152,
            230, 80, 81, 237, 60, 233, 19, 87, 121, 174, 174, 195, 244, 17, 218, 115
          ];

          let proof_a: Vec<u8> = vec![
            3, 90, 251, 125, 73, 238, 226, 147, 219, 11, 218, 100, 233, 150, 39, 57, 77,
            147, 211, 72, 10, 126, 251, 134, 163, 166, 44, 187, 206, 100, 45, 225, 226,
            48, 145, 95, 116, 136, 246, 117, 29, 213, 11, 7, 6, 176, 20, 249, 20, 168,
            236, 95, 194, 59, 28, 23, 156, 168, 232, 151, 178, 44, 63, 56, 253, 198,
            134, 147, 58, 234, 174, 90, 62, 238, 182, 45, 18, 201, 207, 104, 45, 236,
            200, 35, 72, 95, 55, 151, 110, 116, 85, 111, 198, 72, 236, 8
          ];
        let proof_b: Vec<u8> = vec![
            16, 81, 88, 100, 152, 215, 247, 84, 158, 254, 226, 209, 46, 126, 171, 24, 9,
            178, 239, 244, 74, 249, 147, 107, 239, 6, 155, 146, 144, 172, 121, 66, 244,
            170, 191, 19, 102, 100, 255, 88, 5, 247, 241, 138, 193, 19, 220, 84, 4, 157,
            169, 237, 101, 114, 72, 229, 74, 81, 33, 195, 236, 148, 67, 133, 55, 104,
            133, 13, 208, 154, 230, 220, 98, 40, 45, 255, 204, 59, 127, 3, 125, 185,
            127, 17, 151, 104, 43, 250, 212, 47, 3, 151, 144, 119, 118, 95, 23, 129,
            246, 146, 3, 54, 199, 120, 33, 113, 215, 164, 83, 47, 204, 26, 146, 190,
            245, 171, 163, 125, 4, 182, 180, 168, 128, 6, 139, 127, 29, 11, 101, 195,
            157, 85, 27, 134, 66, 216, 235, 116, 69, 36, 118, 231, 209, 71, 16, 122, 21,
            102, 83, 215, 237, 168, 7, 202, 221, 244, 243, 69, 210, 242, 66, 69, 11,
            106, 204, 224, 37, 155, 162, 184, 1, 156, 1, 61, 226, 145, 223, 40, 65, 180,
            14, 114, 203, 4, 147, 176, 26, 246, 55, 228, 220, 2
          ];

        // it should be rejected by verifier, because a invalid proof with correct format
        let invalid_proof_c = vec![
            10, 37, 182, 169, 76, 107, 255, 145, 237, 74, 43, 101, 95, 158, 69, 135, 19,
            132, 254, 127, 250, 228, 232, 110, 216, 222, 240, 5, 81, 44, 44, 238, 55,
            40, 120, 170, 183, 86, 111, 161, 66, 112, 18, 184, 5, 48, 182, 66, 15, 6,
            22, 96, 241, 107, 35, 2, 223, 54, 20, 142, 33, 194, 145, 193, 199, 174, 117,
            129, 205, 99, 195, 147, 165, 156, 164, 78, 222, 76, 235, 159, 95, 71, 127,
            175, 190, 98, 6, 148, 227, 249, 224, 156, 118, 211, 10, 131
          ];

        
        // verifier set verification key and public signals
        assert_ok!(Verifier::set_zk_keys(
            origin.clone(),
            public_signal.clone(),
            vk_alpha1.clone(),
            vk_beta_2.clone(),
            vk_gamma_2.clone(),
            vk_delta_2.clone(),
            vk_ic0.clone(),
            vk_ic1.clone(),
        ));

        // prover provide proof and verifier do verification
        assert_err!(
            Verifier::verify(
                origin.clone(),
                proof_a.clone(),
                proof_b.clone(),
                invalid_proof_c.clone()
            ),
            Error::<Test>::InvalidProof
        ); 
    })
}